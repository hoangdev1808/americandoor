{"version":3,"sources":["map.js"],"names":["mapSelector","document","querySelector","dealerLocatorList","map","itemClicked","markers","locationsInput","zoom","styles","featureType","elementType","stylers","color","visibility","saturation","lightness","addMarkers","position","locationLatLng","InfoWindow","bounds","extend","marker","index","showInfoMarkerOnMap","LatLng","location","lat","lng","google","maps","Marker","fitBounds","title","name","icon","infoWindow","setContent","getLocationList","locations","getBounds","address","newMarker","setAttribute","addEventListener","innerHTML","forEach","contains","getPosition","createElement","classList","add","concat","phone","markerIndex","getAttribute","event","trigger","appendChild","initialize","Map","mapOption","listener","addListener","getZoom","setZoom","removeListener","addDomListener","window"],"mappings":"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","file":"map.min.js","sourcesContent":["const mapSelector = document.querySelector('#map');\r\nconst dealerLocatorList = document.querySelector('.dealer-locator-list .list');\r\n\r\nif (mapSelector) {\r\n\tlet map, itemClicked, markers = [];\r\n\tconst locations = locationsInput;\r\n\tconst mapOption = {\r\n\t\tzoom: 12,\r\n\t\tstyles: [{\r\n\t\t\t\t'featureType': 'administrative',\r\n\t\t\t\t'elementType': 'labels.text.fill',\r\n\t\t\t\t'stylers': [{\r\n\t\t\t\t\t'color': '#444444',\r\n\t\t\t\t}, ],\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t'featureType': 'landscape',\r\n\t\t\t\t'elementType': 'all',\r\n\t\t\t\t'stylers': [{\r\n\t\t\t\t\t'color': '#f2f2f2',\r\n\t\t\t\t}, ],\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t'featureType': 'poi',\r\n\t\t\t\t'elementType': 'all',\r\n\t\t\t\t'stylers': [{\r\n\t\t\t\t\t'visibility': 'off',\r\n\t\t\t\t}, ],\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t'featureType': 'road',\r\n\t\t\t\t'elementType': 'all',\r\n\t\t\t\t'stylers': [{\r\n\t\t\t\t\t\t'saturation': -100,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t'lightness': 45,\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t'featureType': 'road.highway',\r\n\t\t\t\t'elementType': 'all',\r\n\t\t\t\t'stylers': [{\r\n\t\t\t\t\t'visibility': 'simplified',\r\n\t\t\t\t}, ],\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t'featureType': 'road.arterial',\r\n\t\t\t\t'elementType': 'labels.icon',\r\n\t\t\t\t'stylers': [{\r\n\t\t\t\t\t'visibility': 'off',\r\n\t\t\t\t}, ],\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t'featureType': 'transit',\r\n\t\t\t\t'elementType': 'all',\r\n\t\t\t\t'stylers': [{\r\n\t\t\t\t\t'visibility': 'off',\r\n\t\t\t\t}, ],\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t'featureType': 'water',\r\n\t\t\t\t'elementType': 'all',\r\n\t\t\t\t'stylers': [{\r\n\t\t\t\t\t\t'color': '#0c6db5',\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t'visibility': 'on',\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t],\r\n\t};\r\n\r\n\tconst infoWindow = new google.maps.InfoWindow();\r\n\r\n\tconst addMarkers = () => {\r\n\t\tconst bounds = new google.maps.LatLngBounds();\r\n\t\tlocations.forEach((location, index) => {\r\n\t\t\tlet locationLatLng = new google.maps.LatLng(location.lat, location.lng);\r\n\t\t\tlet marker = new google.maps.Marker({\r\n\t\t\t\tmap: map,\r\n\t\t\t\ttitle: location.name,\r\n\t\t\t\tposition: locationLatLng,\r\n\t\t\t\ticon: './assets/icons/marker-icon.svg',\r\n\t\t\t});\r\n\t\t\tbounds.extend(marker.position);\r\n\t\t\tmarkers.push(marker);\r\n\t\t\tshowInfoMarkerOnMap(marker, index);\r\n\t\t});\r\n\r\n\t\tmap.fitBounds(bounds);\r\n\t};\r\n\r\n\tconst showInfoMarkerOnMap = (marker, index) => {\r\n\t\tgoogle.maps.event.addListener(marker, 'click', function() {\r\n\t\t\tinfoWindow.setContent(`\r\n\t\t\t\t\t<h3>${locations[index].name}</h3>\r\n\t\t\t\t\t<p>${locations[index].address}</p>\r\n\t\t\t\t\t<p>${locations[index].phone}</p>\r\n\t\t\t\t`);\r\n\t\t\titemClicked = index;\r\n\t\t\tinfoWindow.open(map, marker);\r\n\t\t\tmap.panTo(marker.getPosition());\r\n\t\t\tmap.setZoom(12);\r\n\t\t})\r\n\t};\r\n\r\n\tconst getLocationList = () => {\r\n\t\tif (dealerLocatorList) {\r\n\t\t\tdealerLocatorList.innerHTML = '';\r\n\t\t\tmarkers.forEach((marker, index) => {\r\n\t\t\t\tif (map.getBounds().contains(marker.getPosition())) {\r\n\t\t\t\t\tconst newMarker = document.createElement('div');\r\n\t\t\t\t\tnewMarker.classList.add('dealer-locator-item');\r\n\t\t\t\t\tnewMarker.innerHTML = `\r\n\t\t\t\t\t\t\t<h3>${locations[index].name}</h3>\r\n\t\t\t\t\t\t\t<p>${locations[index].address}</p>\r\n\t\t\t\t\t\t\t<p>${locations[index].phone}</p>\r\n\t\t\t\t\t\t`;\r\n\t\t\t\t\tnewMarker.setAttribute('marker-id', `${index}`);\r\n\t\t\t\t\tnewMarker.addEventListener('click', () => {\r\n\t\t\t\t\t\titemClicked = index;\r\n\t\t\t\t\t\tconst markerIndex = newMarker.getAttribute('marker-id');\r\n\t\t\t\t\t\tgoogle.maps.event.trigger(markers[markerIndex], 'click');\r\n\t\t\t\t\t});\r\n\t\t\t\t\tdealerLocatorList.appendChild(newMarker);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t// const searchLocation = () => {\r\n\t// \tvar map = new google.maps.Map(document.getElementById('map'), {\r\n\t// \t\tcenter: {\r\n\t// \t\t\tlat: -33.8688,\r\n\t// \t\t\tlng: 151.2195\r\n\t// \t\t},\r\n\t// \t\tzoom: 13,\r\n\t// \t\tmapTypeId: 'roadmap'\r\n\t// \t});\r\n\r\n\t// \t// Create the search box and link it to the UI element.\r\n\t// \tvar input = document.getElementById('pac-input');\r\n\t// \tvar searchBox = new google.maps.places.SearchBox(input);\r\n\t// \tmap.controls[google.maps.ControlPosition.TOP_LEFT].push(input);\r\n\r\n\t// \t// Bias the SearchBox results towards current map's viewport.\r\n\t// \tmap.addListener('bounds_changed', function() {\r\n\t// \t\tsearchBox.setBounds(map.getBounds());\r\n\t// \t});\r\n\r\n\t// \tvar markers = [];\r\n\t// \t// Listen for the event fired when the user selects a prediction and retrieve\r\n\t// \t// more details for that place.\r\n\t// \tsearchBox.addListener('places_changed', function() {\r\n\t// \t\tvar places = searchBox.getPlaces();\r\n\r\n\t// \t\tif (places.length == 0) {\r\n\t// \t\t\treturn;\r\n\t// \t\t}\r\n\r\n\t// \t\t// Clear out the old markers.\r\n\t// \t\tmarkers.forEach(function(marker) {\r\n\t// \t\t\tmarker.setMap(null);\r\n\t// \t\t});\r\n\t// \t\tmarkers = [];\r\n\r\n\t// \t\t// For each place, get the icon, name and location.\r\n\t// \t\tvar bounds = new google.maps.LatLngBounds();\r\n\t// \t\tplaces.forEach(function(place) {\r\n\t// \t\t\tif (!place.geometry) {\r\n\t// \t\t\t\tconsole.log(\"Returned place contains no geometry\");\r\n\t// \t\t\t\treturn;\r\n\t// \t\t\t}\r\n\t// \t\t\tvar icon = {\r\n\t// \t\t\t\turl: place.icon,\r\n\t// \t\t\t\tsize: new google.maps.Size(71, 71),\r\n\t// \t\t\t\torigin: new google.maps.Point(0, 0),\r\n\t// \t\t\t\tanchor: new google.maps.Point(17, 34),\r\n\t// \t\t\t\tscaledSize: new google.maps.Size(25, 25)\r\n\t// \t\t\t};\r\n\r\n\t// \t\t\t// Create a marker for each place.\r\n\t// \t\t\tmarkers.push(new google.maps.Marker({\r\n\t// \t\t\t\tmap: map,\r\n\t// \t\t\t\ticon: icon,\r\n\t// \t\t\t\ttitle: place.name,\r\n\t// \t\t\t\tposition: place.geometry.location\r\n\t// \t\t\t}));\r\n\r\n\t// \t\t\tif (place.geometry.viewport) {\r\n\t// \t\t\t\t// Only geocodes have viewport.\r\n\t// \t\t\t\tbounds.union(place.geometry.viewport);\r\n\t// \t\t\t} else {\r\n\t// \t\t\t\tbounds.extend(place.geometry.location);\r\n\t// \t\t\t}\r\n\t// \t\t});\r\n\t// \t\tmap.fitBounds(bounds);\r\n\t// \t});\r\n\t// }\r\n\r\n\tconst initialize = () => {\r\n\t\tmap = new google.maps.Map(mapSelector, mapOption);\r\n\t\taddMarkers();\r\n\t\tlet listener = google.maps.event.addListener(map, 'idle', () => {\r\n\t\t\tif (map.getZoom() > 12) {\r\n\t\t\t\tmap.setZoom(12);\r\n\t\t\t}\r\n\t\t\tgoogle.maps.event.removeListener(listener);\r\n\t\t});\r\n\t\tgoogle.maps.event.addListener(map, 'bounds_changed', getLocationList);\r\n\t};\r\n\r\n\tgoogle.maps.event.addDomListener(window, 'load', initialize);\r\n}"]}